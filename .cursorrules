# Cursor Rules for Interactive Redis Tutorial

## Project Structure
```
project_root/
├── README.md              # Setup instructions and project overview
├── docker-compose.yml     # Infrastructure setup
├── redis-tutorial.md      # Main tutorial index and overview
└── topic-specific/
    ├── redis-lists.md     # Detailed Lists tutorial
    ├── redis-sets.md      # Detailed Sets tutorial
    ├── redis-streams.md   # Detailed Streams tutorial
    └── redis-{type}.md    # Other data type tutorials
```

## Content Organization Rules

### 1. File Structure
Each tutorial file should follow this structure:
```markdown
# {Redis Type} Deep Dive

Brief introduction and context

## 1. Fundamentals
- Key differences from other types
- Basic concepts
- Core operations

## 2. Type-Specific Operations
- Detailed command usage
- Operation patterns
- Command combinations

## 3. Common Use Cases
- Real-world examples
- Implementation patterns
- Practical scenarios

## 4. Performance Characteristics
- Time complexity
- Memory usage
- Performance tips

## 5. Best Practices
- Design patterns
- Error handling
- Memory management

## 6. Common Patterns
- Frequently used solutions
- Pattern implementations
- Pattern trade-offs

## 7. Production Considerations
- Monitoring
- Scaling
- Maintenance

## 8. When to Use This Type
- Use cases for this type
- Comparison with alternatives
- Trade-off analysis
```

### 2. Content Guidelines

#### Command Examples
```redis
# Descriptive comment about what the command does
COMMAND key value  # Inline comment about result

# Multi-line command sequence
COMMAND1 key value
COMMAND2 key value  # With explanation
```

#### Code Blocks
- Use ```redis for Redis commands
- Include comments for each command
- Show expected output where relevant
- Provide context and explanations

#### Use Cases
- Start with simple examples
- Build up to complex scenarios
- Include real-world context
- Show complete solutions

### 3. Writing Style

#### Command Documentation
- Clear purpose explanation
- Parameter descriptions
- Return value format
- Common usage patterns

#### Best Practices
- Explain the "why" not just "how"
- Include anti-patterns to avoid
- Provide performance implications
- Show error handling

#### Performance Notes
- Include time complexity
- Memory usage characteristics
- Scaling considerations
- Performance tips

### 4. Content Updates

#### Adding New Content
- Follow the established section order
- Maintain consistent formatting
- Include practical examples
- Cross-reference related topics

#### Modifying Content
- Preserve section structure
- Update related sections
- Keep examples consistent
- Maintain formatting

#### Content Review
- Check command accuracy
- Verify example outputs
- Test code snippets
- Update cross-references

## Version Control

### 1. Commit Messages
Format: `type: description`
Types:
- docs: Documentation changes
- feat: New features or content
- fix: Content corrections
- style: Formatting changes

### 2. File Management
- One topic per file
- Consistent file naming
- Regular backups
- Clear change history

## Quality Standards

### 1. Content Quality
- Accurate information
- Clear explanations
- Practical examples
- Complete coverage

### 2. Code Quality
- Working examples
- Clear comments
- Best practices
- Error handling

### 3. Documentation
- Clear structure
- Consistent formatting
- Complete information
- Regular updates

## Interactive Demonstrations

### 1. Example Consistency
- Use the same examples from tutorials during interactive demos
- Never create different examples for the same concept
- If a command doesn't work, update both the demo and tutorial
- Keep examples synchronized across all interactions

### 2. Demo Flow
- Follow the same progression as in tutorials
- Start with basic examples before complex ones
- Use the exact same key names and values
- Maintain consistency in command parameters

### 3. Tutorial Validation
- Test all commands before adding to tutorials
- Verify commands work in the current Redis version
- Document any version-specific features
- Update tutorials if commands behave differently

### 4. Error Handling
- If a command fails during demo, investigate immediately
- Update tutorial if the error reveals a problem
- Document any prerequisites or requirements
- Add error scenarios to tutorials if commonly encountered

## Maintenance

### 1. Regular Updates
- Check command accuracy
- Update for new Redis versions
- Refresh examples
- Add new patterns

### 2. Content Review
- Technical accuracy
- Example validity
- Link checking
- Format consistency 